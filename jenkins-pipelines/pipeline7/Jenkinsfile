def err = null
try {
	agent any 
 stages {
  stage('Run Tests') {
   steps {
   git url: 'https://github.com/masmix/laughing-adventure.git'
   node('testslave') {
        git url: 'https://github.com/masmix/laughing-adventure.git'
        sh "hostname"
        sh "ls -la"
        sh "pwd"
        //sh "python docker-api-training/hello-flask/run-container.py"
}
      node('testslave2'){
          sh "hostname" }
   }
  }
  stage('Deploy') {
   parallel {
    stage('Dev') {
      steps {
      node('testslave') {
                sh "hostname"}
      node('testslave2'){
                sh "hostname" }
                 }
    }
    stage('QA') {
      steps {
      node('testslave') {
                sh "hostname"}
      node('testslave2'){
                sh "hostname" }

     }
    }
   }
  }
 }

} catch (caughtError) { //End of Try
    err = caughtError
    currentBuild.result = "FAILURE"
} finally {
    (currentBuild.result != "ABORTED") && node("master") {
        // Send e-mail notifications for failed or unstable builds.
        // currentBuild.result must be non-null for this step to work.
        //step(){
	//	sh "echo 'echo Sending e-mail'"
	//	}
    step([$class: 'Mailer', notifyEveryUnstableBuild: true, recipients: 'wojciech.kaczmarczyk@capgemini.com', sendToIndividuals: true])
 }
    if (err) {
        throw err
    }
}






