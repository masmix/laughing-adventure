package pipeline1
node {
    def mvnHome
    stage('Preparation') { // for display purposes
        //git 'https://github.com/jglick/simple-maven-project-with-tests.git'
        //git 'git@172.17.0.4:/git-server/repos/myrepo.git'
        //dir('complete')
        // {


        checkout([$class                           : 'GitSCM',
                  branches                         : [[name: '*/master']],
                  doGenerateSubmoduleConfigurations: false,
                  extensions                       : [[$class           : 'RelativeTargetDirectory',
                                                       relativeTargetDir: '']],
                  submoduleCfg                     : [],
                  userRemoteConfigs                : [[url: 'ssh://git@git-server/git-server/repos/myrepo.git']]])
        //}

        // Get the Maven tool.
        // ** NOTE: This 'M3' Maven tool must be configured
        // **       in the global configuration.
        //def v = version()
        //if (v) {
         //   echo "Building version ${v}"
        //}
        //def version() {
        //    def matcher = readFile('pom.xml') =~ '<version>(.+)</version>'
         //   matcher ? matcher[0][1] : null
        //}

        def matcher = readFile('complete/pom.xml') =~ '<version>(.+)</version>'
        if (matcher) {
            echo "Building version ${matcher[0][1]}"
        }
        matcher=null
        mvnHome = tool 'maven1'
        sh "${mvnHome}/bin/mvn -B -Dmaven.test.failure.ignore verify"
        step([$class: 'ArtifactArchiver', artifacts: '**/target/*.jar', fingerprint: true])
        step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])
}

    stage('SonarQube analysis') {
 // ('workspace/pipeline2/sonar-project.properties') //
       // requires SonarQube Scanner 2.8+
        def scannerHome = tool 'sonar1'
        echo scannerHome
        withSonarQubeEnv('sonar1') {
            sh "${scannerHome}/bin/sonar-scanner"
        }
    }


    stage('Build') {
        // Run the maven build
        if (isUnix()) {
            sh "'${mvnHome}/bin/mvn' -Dmaven.test.failure.ignore clean package -f complete"
        } else {
            bat(/"${mvnHome}\bin\mvn" -Dmaven.test.failure.ignore clean package -f complete/)
        }
    }
    stage('Results') {
        junit '**/target/surefire-reports/TEST-*.xml'
        archive 'target/*.jar'
    }

    stage('Publish') {
        nexusPublisher nexusInstanceId: 'nexus3-1', nexusRepositoryId: 'maven-releases', packages: [[$class: 'MavenPackage', mavenAssetList: [[classifier: '', extension: '', filePath: 'complete/target/gs-spring-boot-0.1.0.jar']], mavenCoordinate: [artifactId: 'gs-spring-boot', groupId: 'org.springframework', packaging: 'jar', version: '0.1.0']]]
    }
}
